apply plugin: 'com.android.application'
def aaa = "未被初始化"

android {
    compileSdkVersion ANDROID_COMPLILE_SDK_VERSION as int
    buildToolsVersion ANDROID_BUILD_SDK_VERSION

    defaultConfig {
        applicationId "android.com.testgradle"
        minSdkVersion rootProject.ext.minSdk
        targetSdkVersion rootProject.ext.targetSdk
        versionCode 1
        versionName "1.0"
    }
    //通过输入
    // aaa = new String(System.console().readLine("请输入字符串:"))
    //通过文件
    if (rootProject.file('test.properties').exists()) {
        java.util.Properties properties = new Properties()
        properties.load(rootProject.file('test.properties').newDataInputStream())
        aaa = properties.getProperty('debug.text')
        println("!!!!!" + aaa)
    } else {
        aaa = "文件没找到"
    }
    buildTypes {
        debug {
            //buildConfigField("String","TEXT","\""+aaa+"\"")
            buildConfigField("String", "TEXT", "\"$aaa\"")
            resValue("color", "textcolor", "#DDA0DD")
            minifyEnabled false
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "GooglePlay"]
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        stag {
            buildConfigField("String", "TEXT", "\"这个字符串来自test模式\"")
            resValue("color", "textcolor", "#aaaaaa")
            minifyEnabled false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            buildConfigField("String", "TEXT", "\"这个字符串来自release模式\"")
            resValue("color", "textcolor", "#aaaaaa")
            minifyEnabled false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            aidl.srcDirs = ['aidl']
            jniLibs.srcDirs = ['libs']
        }
        androidTest {
            java.srcDirs = ['src/androidTest/java']
        }
        testLocal {
            java.srcDirs = ['scr/test/java']
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }
//    productFlavors {
//        free {
//            applicationId 'android.com.free'
//                versionCode 1
//    minSdkVersion rootProject.ext.minSdk
//    targetSdkVersion rootProject.ext.targetSdk
//
//        }
//        pay {
//            applicationId 'android.com.pay'
//
//        }
//    }

}
task getTextFromConsole << {
    println("#######" + aaa)
    aaa = new String(System.console().readLine("控制台输入一段文字:"))
    println("#######" + aaa)

}

task testConfigure {
    println("configure before run")
}

task testDoLast << {
    println("configure before run")
}

//task testDoLast {
//    doLast {
//        println("ccc")
//        println("dddd")
//    }
//}

//tasks.whenTaskAdded {theTask->
//    println("!!!!!!"+theTask.name)
//    if (theTask.name.equals("preDebugBuild")){
//        println("ddddddddddd")
//        theTask.dependsOn "gettextfromnet"
//    }
//}
dependencies {
    // compile fileTree(dir: 'libs', include: ['*.jar'])
    //   testCompile 'junit:junit:4.12'
    // compile 'com.android.support:appcompat-v7:24.2.1'
    compile project(':mylibrary1')
    //    debugCompile project(':mylibrary1')
    compile project(':mylibrary2')
    compile project(':mylibrary3')
    //   compile files('libs/umeng_social_net.jar')
    compile project(':mylibrary4')
    //   compile project(':commonlib')
    compile 'com.android.support:support-v4:25.0.0'
}
